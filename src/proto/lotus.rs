// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.v1alpha1.IndexOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IndexOption {
    // message fields
    // @@protoc_insertion_point(field:lotus.v1alpha1.IndexOption.type)
    pub type_: ::protobuf::EnumOrUnknown<IndexType>,
    // @@protoc_insertion_point(field:lotus.v1alpha1.IndexOption.unique)
    pub unique: bool,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.v1alpha1.IndexOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IndexOption {
    fn default() -> &'a IndexOption {
        <IndexOption as ::protobuf::Message>::default_instance()
    }
}

impl IndexOption {
    pub fn new() -> IndexOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &IndexOption| { &m.type_ },
            |m: &mut IndexOption| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique",
            |m: &IndexOption| { &m.unique },
            |m: &mut IndexOption| { &mut m.unique },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IndexOption>(
            "IndexOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IndexOption {
    const NAME: &'static str = "IndexOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.unique = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.unique != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.unique != false {
            os.write_bool(2, self.unique)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IndexOption {
        IndexOption::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED);
        self.unique = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IndexOption {
        static instance: IndexOption = IndexOption {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            unique: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IndexOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IndexOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IndexOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:lotus.v1alpha1.CompositeIndexesOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompositeIndexesOption {
    // message fields
    // @@protoc_insertion_point(field:lotus.v1alpha1.CompositeIndexesOption.index)
    pub index: ::std::vec::Vec<CompositeIndexOption>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.v1alpha1.CompositeIndexesOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompositeIndexesOption {
    fn default() -> &'a CompositeIndexesOption {
        <CompositeIndexesOption as ::protobuf::Message>::default_instance()
    }
}

impl CompositeIndexesOption {
    pub fn new() -> CompositeIndexesOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "index",
            |m: &CompositeIndexesOption| { &m.index },
            |m: &mut CompositeIndexesOption| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompositeIndexesOption>(
            "CompositeIndexesOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompositeIndexesOption {
    const NAME: &'static str = "CompositeIndexesOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.index.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.index {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.index {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompositeIndexesOption {
        CompositeIndexesOption::new()
    }

    fn clear(&mut self) {
        self.index.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompositeIndexesOption {
        static instance: CompositeIndexesOption = CompositeIndexesOption {
            index: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompositeIndexesOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompositeIndexesOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompositeIndexesOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeIndexesOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:lotus.v1alpha1.CompositeIndexOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompositeIndexOption {
    // message fields
    // @@protoc_insertion_point(field:lotus.v1alpha1.CompositeIndexOption.type)
    pub type_: ::protobuf::EnumOrUnknown<IndexType>,
    // @@protoc_insertion_point(field:lotus.v1alpha1.CompositeIndexOption.unique)
    pub unique: bool,
    // @@protoc_insertion_point(field:lotus.v1alpha1.CompositeIndexOption.fields)
    pub fields: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.v1alpha1.CompositeIndexOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompositeIndexOption {
    fn default() -> &'a CompositeIndexOption {
        <CompositeIndexOption as ::protobuf::Message>::default_instance()
    }
}

impl CompositeIndexOption {
    pub fn new() -> CompositeIndexOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CompositeIndexOption| { &m.type_ },
            |m: &mut CompositeIndexOption| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique",
            |m: &CompositeIndexOption| { &m.unique },
            |m: &mut CompositeIndexOption| { &mut m.unique },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &CompositeIndexOption| { &m.fields },
            |m: &mut CompositeIndexOption| { &mut m.fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompositeIndexOption>(
            "CompositeIndexOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompositeIndexOption {
    const NAME: &'static str = "CompositeIndexOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.unique = is.read_bool()?;
                },
                26 => {
                    self.fields.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.unique != false {
            my_size += 1 + 1;
        }
        for value in &self.fields {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.unique != false {
            os.write_bool(2, self.unique)?;
        }
        for v in &self.fields {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompositeIndexOption {
        CompositeIndexOption::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED);
        self.unique = false;
        self.fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompositeIndexOption {
        static instance: CompositeIndexOption = CompositeIndexOption {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            unique: false,
            fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompositeIndexOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompositeIndexOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompositeIndexOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeIndexOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:lotus.v1alpha1.BytesOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BytesOption {
    // message fields
    // @@protoc_insertion_point(field:lotus.v1alpha1.BytesOption.format)
    pub format: ::protobuf::EnumOrUnknown<FormatType>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.v1alpha1.BytesOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BytesOption {
    fn default() -> &'a BytesOption {
        <BytesOption as ::protobuf::Message>::default_instance()
    }
}

impl BytesOption {
    pub fn new() -> BytesOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &BytesOption| { &m.format },
            |m: &mut BytesOption| { &mut m.format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BytesOption>(
            "BytesOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BytesOption {
    const NAME: &'static str = "BytesOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.format = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.format != ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64) {
            my_size += ::protobuf::rt::int32_size(1, self.format.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.format != ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.format))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BytesOption {
        BytesOption::new()
    }

    fn clear(&mut self) {
        self.format = ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BytesOption {
        static instance: BytesOption = BytesOption {
            format: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BytesOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BytesOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BytesOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytesOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:lotus.v1alpha1.NumericOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NumericOption {
    // message fields
    // @@protoc_insertion_point(field:lotus.v1alpha1.NumericOption.precision)
    pub precision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:lotus.v1alpha1.NumericOption.scale)
    pub scale: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.v1alpha1.NumericOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NumericOption {
    fn default() -> &'a NumericOption {
        <NumericOption as ::protobuf::Message>::default_instance()
    }
}

impl NumericOption {
    pub fn new() -> NumericOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "precision",
            |m: &NumericOption| { &m.precision },
            |m: &mut NumericOption| { &mut m.precision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scale",
            |m: &NumericOption| { &m.scale },
            |m: &mut NumericOption| { &mut m.scale },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NumericOption>(
            "NumericOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NumericOption {
    const NAME: &'static str = "NumericOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.precision = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.scale = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.precision {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.scale {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.precision {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.scale {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NumericOption {
        NumericOption::new()
    }

    fn clear(&mut self) {
        self.precision = ::std::option::Option::None;
        self.scale = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NumericOption {
        static instance: NumericOption = NumericOption {
            precision: ::std::option::Option::None,
            scale: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NumericOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NumericOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NumericOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumericOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.v1alpha1.IndexType)
pub enum IndexType {
    // @@protoc_insertion_point(enum_value:lotus.v1alpha1.IndexType.INDEX_TYPE_ORDERED)
    INDEX_TYPE_ORDERED = 0,
    // @@protoc_insertion_point(enum_value:lotus.v1alpha1.IndexType.INDEX_TYPE_UNORDERED)
    INDEX_TYPE_UNORDERED = 1,
}

impl ::protobuf::Enum for IndexType {
    const NAME: &'static str = "IndexType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IndexType> {
        match value {
            0 => ::std::option::Option::Some(IndexType::INDEX_TYPE_ORDERED),
            1 => ::std::option::Option::Some(IndexType::INDEX_TYPE_UNORDERED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<IndexType> {
        match str {
            "INDEX_TYPE_ORDERED" => ::std::option::Option::Some(IndexType::INDEX_TYPE_ORDERED),
            "INDEX_TYPE_UNORDERED" => ::std::option::Option::Some(IndexType::INDEX_TYPE_UNORDERED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [IndexType] = &[
        IndexType::INDEX_TYPE_ORDERED,
        IndexType::INDEX_TYPE_UNORDERED,
    ];
}

impl ::protobuf::EnumFull for IndexType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("IndexType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for IndexType {
    fn default() -> Self {
        IndexType::INDEX_TYPE_ORDERED
    }
}

impl IndexType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<IndexType>("IndexType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.v1alpha1.FormatType)
pub enum FormatType {
    // @@protoc_insertion_point(enum_value:lotus.v1alpha1.FormatType.FORMAT_TYPE_BASE64)
    FORMAT_TYPE_BASE64 = 0,
    // @@protoc_insertion_point(enum_value:lotus.v1alpha1.FormatType.FORMAT_TYPE_HEX)
    FORMAT_TYPE_HEX = 1,
    // @@protoc_insertion_point(enum_value:lotus.v1alpha1.FormatType.FORMAT_TYPE_BECH32)
    FORMAT_TYPE_BECH32 = 2,
}

impl ::protobuf::Enum for FormatType {
    const NAME: &'static str = "FormatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FormatType> {
        match value {
            0 => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BASE64),
            1 => ::std::option::Option::Some(FormatType::FORMAT_TYPE_HEX),
            2 => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BECH32),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<FormatType> {
        match str {
            "FORMAT_TYPE_BASE64" => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BASE64),
            "FORMAT_TYPE_HEX" => ::std::option::Option::Some(FormatType::FORMAT_TYPE_HEX),
            "FORMAT_TYPE_BECH32" => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BECH32),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FormatType] = &[
        FormatType::FORMAT_TYPE_BASE64,
        FormatType::FORMAT_TYPE_HEX,
        FormatType::FORMAT_TYPE_BECH32,
    ];
}

impl ::protobuf::EnumFull for FormatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FormatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FormatType {
    fn default() -> Self {
        FormatType::FORMAT_TYPE_BASE64
    }
}

impl FormatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FormatType>("FormatType")
    }
}

/// Extension fields
pub mod exts {

    pub const composite: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, super::CompositeIndexesOption> = ::protobuf::ext::ExtFieldOptional::new(99001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const index: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::IndexOption> = ::protobuf::ext::ExtFieldOptional::new(99001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const bytes: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::BytesOption> = ::protobuf::ext::ExtFieldOptional::new(99002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const numeric: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::NumericOption> = ::protobuf::ext::ExtFieldOptional::new(99003, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0blotus.proto\x12\x0elotus.v1alpha1\x1a\x20google/protobuf/descripto\
    r.proto\"T\n\x0bIndexOption\x12-\n\x04type\x18\x01\x20\x01(\x0e2\x19.lot\
    us.v1alpha1.IndexTypeR\x04type\x12\x16\n\x06unique\x18\x02\x20\x01(\x08R\
    \x06unique\"T\n\x16CompositeIndexesOption\x12:\n\x05index\x18\x01\x20\
    \x03(\x0b2$.lotus.v1alpha1.CompositeIndexOptionR\x05index\"u\n\x14Compos\
    iteIndexOption\x12-\n\x04type\x18\x01\x20\x01(\x0e2\x19.lotus.v1alpha1.I\
    ndexTypeR\x04type\x12\x16\n\x06unique\x18\x02\x20\x01(\x08R\x06unique\
    \x12\x16\n\x06fields\x18\x03\x20\x03(\tR\x06fields\"A\n\x0bBytesOption\
    \x122\n\x06format\x18\x01\x20\x01(\x0e2\x1a.lotus.v1alpha1.FormatTypeR\
    \x06format\"e\n\rNumericOption\x12!\n\tprecision\x18\x01\x20\x01(\rH\0R\
    \tprecision\x88\x01\x01\x12\x19\n\x05scale\x18\x02\x20\x01(\rH\x01R\x05s\
    cale\x88\x01\x01B\x0c\n\n_precisionB\x08\n\x06_scale*=\n\tIndexType\x12\
    \x16\n\x12INDEX_TYPE_ORDERED\x10\0\x12\x18\n\x14INDEX_TYPE_UNORDERED\x10\
    \x01*Q\n\nFormatType\x12\x16\n\x12FORMAT_TYPE_BASE64\x10\0\x12\x13\n\x0f\
    FORMAT_TYPE_HEX\x10\x01\x12\x16\n\x12FORMAT_TYPE_BECH32\x10\x02:j\n\tcom\
    posite\x18\xb9\x85\x06\x20\x01(\x0b2&.lotus.v1alpha1.CompositeIndexesOpt\
    ion\x12\x1f.google.protobuf.MessageOptionsR\tcomposite\x88\x01\x01:U\n\
    \x05index\x18\xb9\x85\x06\x20\x01(\x0b2\x1b.lotus.v1alpha1.IndexOption\
    \x12\x1d.google.protobuf.FieldOptionsR\x05index\x88\x01\x01:U\n\x05bytes\
    \x18\xba\x85\x06\x20\x01(\x0b2\x1b.lotus.v1alpha1.BytesOption\x12\x1d.go\
    ogle.protobuf.FieldOptionsR\x05bytes\x88\x01\x01:[\n\x07numeric\x18\xbb\
    \x85\x06\x20\x01(\x0b2\x1d.lotus.v1alpha1.NumericOption\x12\x1d.google.p\
    rotobuf.FieldOptionsR\x07numeric\x88\x01\x01B1Z/github.com/trylotus/prot\
    os/lotus/v1alpha1;lotusb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(IndexOption::generated_message_descriptor_data());
            messages.push(CompositeIndexesOption::generated_message_descriptor_data());
            messages.push(CompositeIndexOption::generated_message_descriptor_data());
            messages.push(BytesOption::generated_message_descriptor_data());
            messages.push(NumericOption::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(IndexType::generated_enum_descriptor_data());
            enums.push(FormatType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
